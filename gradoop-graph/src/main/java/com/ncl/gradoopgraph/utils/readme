The main goal of this code is to provide a way to transform and split logic graphs.

First, the code defines a static edge type information map, which encodes the label of the edge and defines its priority and directionality.
Then, transform the input logic graph through the transformGraph method.
The conversion process mainly includes two steps, generating new vertices and generating new edges.

In the process of generating a new vertex, the source and target vertices in the input logical graph are merged and a new vertex is generated.
The properties of the new vertex are composed of the properties of the source and destination vertices and the properties of the edges.
Also, the IDs of new vertices are randomly generated, while the labels are taken from the labels of the edges.

In the process of generating new edges, the new vertices are first classified according to the IDs of the source vertices.
Then, new vertices for each category are sorted according to timestamp and priority.
Finally, new edges are created based on adjacent new vertices.

Through the above steps, a converted logic diagram is generated.
Next, split the converted logical graph into multiple subgraphs through the splitGraphByChainId method.

Each subgraph is grouped based on the chainId property of the edges.
That is, edges and corresponding vertices with the same chainId attribute will form a subgraph.